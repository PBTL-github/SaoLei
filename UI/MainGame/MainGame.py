# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainGame.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import random
import datetime

from PyQt5 import QtCore, QtGui
from PyQt5.QtWidgets import QDialog, QMessageBox
from typing import List
from .SaoLeiBtn.SaoLeiBtn import SaoLeiBtn


def my_sleep(seconds: float, func, arg, arg2=None):
    print("asdfasdf")
    start_time = datetime.datetime.now()
    while True:
        end_time = datetime.datetime.now()
        if (end_time - start_time).seconds == seconds:
            if arg2:
                func(arg, arg2)
            else:
                func(arg)
            return


class Ui_MainGame(QDialog):
    _signal = QtCore.pyqtSignal(int)

    def __init__(self, width, height, count_boom=0, parent=None):
        super(Ui_MainGame, self).__init__(parent)
        print(width, height, count_boom)
        self.setObjectName("MainGame")
        self.resize(400, 300)
        SaoLeiBtn.firstClick = False
        self.w = width  # 横向个数
        self.h = height  # 纵向个数
        self.countBoom = count_boom  # 雷数
        self.sizeWidth = 25  # 按钮大小
        self.shutDown = 1  # 是否关闭程序
        self.btnList: List[List[SaoLeiBtn]] = []
        self.safetyList = []  # 安全区域列表
        self.playOpenBtn = []  # 用户打开列表
        self.messageBox = QMessageBox(QMessageBox.Question, "提示", "恭喜你获得胜利, 是否开始下一把游戏?")

        self.re_window_size()
        self.sizeWidth = self.width() / self.w

        self.create_sao_lei_area()

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def re_window_size(self):
        """重置窗口大小"""
        width = self.w * self.sizeWidth
        height = self.h * self.sizeWidth
        self.resize(width, height)
        self.setMaximumSize(QtCore.QSize(width, height))
        self.setMinimumSize(QtCore.QSize(width, height))

    def create_sao_lei_area(self):
        """创建扫雷区域"""
        temp_sid = 0
        for i in range(self.h):
            self.btnList.append([])
            for j in range(self.w):
                saolei_btn = SaoLeiBtn(self)
                saolei_btn.indexX = j
                saolei_btn.indexY = i
                saolei_btn.X = 0 if j == 0 else j * self.sizeWidth
                saolei_btn.Y = 0 if i == 0 else i * self.sizeWidth
                saolei_btn.setGeometry(
                    QtCore.QRect(saolei_btn.X, saolei_btn.Y, self.sizeWidth, self.sizeWidth))
                saolei_btn.setStyleSheet("QPushButton:hover{\n"
                                         "	background-color: rgb(50, 235, 235);\n"
                                         "}\n"
                                         "QPushButton{\n"
                                         "	background-color: rgb(24, 194, 192)\n"
                                         "}")
                saolei_btn.sid = temp_sid
                self.safetyList.append(temp_sid)
                temp_sid += 1
                saolei_btn.clicked.connect(self.sao_lei_btn_click)
                saolei_btn.rightClicked.connect(self.sao_lei_btn_right_click)
                self.btnList[i].append(saolei_btn)

    def sao_lei_btn_click(self):
        """按钮点击事件"""
        sender: SaoLeiBtn = self.sender()
        if not sender.isOpen:
            if not SaoLeiBtn.firstClick:
                SaoLeiBtn.firstClick = True
                self.layout_boom(sender, self.countBoom)
                self.open_not_boom_btn(sender.indexX, sender.indexY)
                self.show_winner()
            elif not sender.isOpen:
                if sender.isBoom:
                    sender.setText("*")
                    sender.isOpen = True
                    sender.setStyleSheet("border:0.5px solid #333;")
                    # self.open_boom_btn(sender.indexX, sender.indexY)
                    # my_sleep(2, self.show_winner, True)
                    self.show_winner(True)
                else:
                    self.open_not_boom_btn(sender.indexX, sender.indexY)
                    sender.isOpen = True
                    sender.setStyleSheet("border:0.5px solid #333;")
                    self.playOpenBtn.append(sender.sid)
                    self.show_winner()

    def sao_lei_btn_right_click(self):
        sender: SaoLeiBtn = self.sender()
        if sender.text() == "":
            sender.setText("○")
            sender.isOpen = True
        elif sender.text() == "○":
            sender.setText("")
            sender.isOpen = False

    def open_not_boom_btn(self, idx_x, idx_y):
        """打开无雷按钮"""
        around_has_boom = False
        temp_this_btn = self.btnList[idx_y][idx_x]
        # 阻止开
        for i in range(idx_y - 1, idx_y + 2):
            for j in range(idx_x - 1, idx_x + 2):
                if i < 0 or i >= self.h or j < 0 or j >= self.w:
                    continue
                else:
                    if self.btnList[i][j].isBoom:
                        around_has_boom = True
                        temp_this_btn.add_around_boom_num()
                        temp_this_btn.setText(str(temp_this_btn.aroundBoomNum))

        # 开按钮
        if not around_has_boom:
            for i in range(idx_y - 1, idx_y + 2):
                for j in range(idx_x - 1, idx_x + 2):
                    if i < 0 or i >= self.h or j < 0 or j >= self.w:
                        continue
                    elif not self.btnList[i][j].isOpen:
                        self.btnList[i][j].setStyleSheet("border:0.5px solid #333;")
                        self.btnList[i][j].isOpen = True
                        self.playOpenBtn.append(self.btnList[i][j].sid)
                        self.open_not_boom_btn(j, i)

    def open_boom_btn(self, idx_x, idx_y):
        pass
        # for i in range(idx_y - 1, idx_y + 2):
        #     for j in range(idx_x - 1, idx_x + 2):
        #         if i < 0 or i >= self.h or j < 0 or j >= self.w:
        #             continue
        #         else:
        #             if self.btnList[i][j].isBoom:
        #                 self.btnList[i][j].setStyleSheet("border:0.5px solid #333;")
        #                 self.btnList[i][j].isOpen = True
        #                 self.btnList[i][j].setText("*")
        #                 self.btnList[i][j].isBoom = False
        #                 self.open_boom_btn(j, i)


    def layout_boom(self, sender, count_boom):
        """布置雷区"""
        temp_list = list(range(self.w * self.h))
        for i in range(sender.indexY - 1, sender.indexY + 2):
            for j in range(sender.indexX - 1, sender.indexX + 2):
                if i < 0 or i >= self.h or j < 0 or j >= self.w:
                    continue
                else:
                    temp_list.remove(self.btnList[i][j].sid)

        boom_sid_list = random.sample(temp_list, count_boom)
        for i in range(self.h):
            for j in range(self.w):
                temp_sid = self.btnList[i][j].sid
                if temp_sid in boom_sid_list:
                    self.btnList[i][j].isBoom = True
                    self.safetyList.remove(temp_sid)

    def show_winner(self, lower=False):
        temp_safety = set(self.safetyList)
        temp_play_open = set(self.playOpenBtn)
        if temp_safety == temp_play_open:
            """胜利判定"""
            self.message_show()
        list(self.safetyList)
        list(self.playOpenBtn)
        if lower:
            self.message_show(lower)

    def message_show(self, lower=False):
        if lower:
            self.messageBox = QMessageBox(QMessageBox.Question, "提示", "非常遗憾你失败了, 是否开始下一把游戏?")

        yes = self.messageBox.addButton("确定", QMessageBox.YesRole)
        no = self.messageBox.addButton("取消", QMessageBox.NoRole)
        self.messageBox.exec_()
        if self.messageBox.clickedButton() == yes:
            """返回主窗口，重置主窗口"""
            self.shutDown = 1
            self.close()
        elif self.messageBox.clickedButton() == no:
            self.shutDown = 0
            self.close()

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainGame", "Dialog"))

    def closeEvent(self, a0: QtGui.QCloseEvent) -> None:
        if self.shutDown == 1:
            self._signal.emit(1)
        else:
            self._signal.emit(0)

    @property
    def signal(self):
        return self._signal
